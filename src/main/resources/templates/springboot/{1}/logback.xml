<?xml version="1.0" encoding="UTF-8"?>
<!-- scan扫描配置文件的变化并自动重新配置 -->
<configuration scan="true" scanPeriod="30 seconds" debug="true" packagingData="${log.packagingData:-true}">
	<timestamp key="timestamp" datePattern="yyyyMMdd'T'HHmmss"/>
	<property name="LOG_BASE" value="/logs/${log.dir.name:-${timestamp}}/${log.dir.name:-${timestamp}}"  />
	<property name="CHARSET" value="UTF-8" />
	<!-- <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" />   -->
	<jmxConfigurator />
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"
			charset="${CHARSET}">
			<pattern>%-15d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80}[%file:%line] %X{userId}-%X{_sessionId}-%X{_ip} %msg%n %ex{2}</pattern>
		</encoder>
	</appender>
	<!-- 错误日志配置 RollingFileAppender继承自ch.qos.logback.core.FileAppender -->
	<appender name="common-error"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 限定只输出ERROR级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<File>${LOG_BASE}_error.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_BASE}_error_%d{yyyy-MM-dd_HH}.%i.log
			</fileNamePattern>
			<!-- 保留天数 -->
			<maxHistory>${log.maxHistory:-60}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${log.maxFileSize:-10MB}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<append>true</append>
		<encoder charset="${CHARSET}"
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%-15d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80}[%file:%line] %X{userId}-%X{_sessionId}-%X{_ip}  %msg%n %ex{2}</pattern>
			<charset>${CHARSET}</charset>
			<immediateFlush>true</immediateFlush>
		</encoder>
	</appender>
	<!-- 应用日志 -->
	<appender name="common-default"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${LOG_BASE}_default.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_BASE}_default.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!-- 保留天数 -->
			<maxHistory>${log.maxHistory:-60}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${log.maxFileSize:-10MB}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
			<!-- HTML文件输出:encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder" 
			pattern class="ch.qos.logback.classic.html.HTMLLayout" -->
		<append>true</append>
		<encoder charset="${CHARSET}"
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%-15d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80}[%file:%line] %X{userId}-%X{_sessionId}-%X{_ip}  %msg%n %ex{2}</pattern>
			<charset>${CHARSET}</charset>
			<immediateFlush>true</immediateFlush>
		</encoder>
	</appender>

	<!-- logger的向上传递性属性 additivity默认为true -->
	<logger name="ch.qos.logback.classic" level="WARN" />
	<logger name="java.sql" level="WARN" />
	<logger name="jdbc" level="WARN" />
	<!-- 调试应用程序时，只需设置root的输出级别为debug,设置第三方开源组件(hibernate spring)日志输出级别为ERROR(屏蔽设置为OFF) 
		<logger name="org" level="ERROR"/> -->
	<logger name="org.hibernate" level="INFO" />
	<logger name="org.hibernate.cache" level="ERROR" />
	<logger name="org.hibernate.sql" level="INFO" />
	<logger name="org.hibernate.engine" level="INFO" />
	<logger name="org.hibernate.type" level="ERROR" />
	<logger name="org.hibernate.util" level="ERROR" />
	<logger name="org.hibernate.cfg" level="WARN" />

	<logger name="org.springframework" level="INFO" />
	<logger name="org.springframework.web" level="INFO" />

	<logger name="org.apache" level="INFO" />
	<logger name="org.apache.shiro" level="INFO" />
	<logger name="org.apache.mina" level="WARN" />

	<!-- 如果SimpleMappingExceptionResolver的warnLogCategory不为空，spring就会使用apache的org.apache.commons.logging.Log日志工具记录异常，级别是warn。 -->
	<logger
		name="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"
		level="WARN" />

	<logger name="com.danga.MemCached" level="INFO" />
	<logger name="net.sf.ehcache" level="INFO" />
	<logger name="freemarker" level="INFO" />

	<logger name="org.eclipse.jetty" level="INFO" />
	<logger name="com.opensymphony" level="WARN" />
	<logger name="net.sf" level="WARN" />
	<!-- 输出SQL语句 -->
	<logger name="druid.sql.Statement" level="${log.druid.sql.Statement.level:-DEBUG}" />
	<logger name="com.alibaba.dubbo" level="INFO" />
	<root level="${log.root.level:-INFO}">
		<!--将appender添加到root logger下 -->
		<appender-ref ref="stdout"  level="${log.stdout.level:-INFO}"/>
		<appender-ref ref="common-error" level="ERROR" />
		<appender-ref ref="common-default"   />
	</root>
<!--
	<appender name="project-dao"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator name="eval_dao">
				<expression>logger.contains(".dao.")</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<File>${LOG_BASE}_dao.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${LOG_BASE}_dao.%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<maxHistory>${log.maxHistory:-60}</maxHistory>
		</rollingPolicy>
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>${log.maxFileSize:-10MB}</MaxFileSize>
		</triggeringPolicy>
		<append>true</append>
		<encoder charset="${CHARSET}"
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%-15d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level
				%logger{80}[%file:%line] - %msg%n %ex{2}</pattern>
			<charset>${CHARSET}</charset>
			<immediateFlush>true</immediateFlush>
		</encoder>
	</appender>
	<appender name="project-service"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator name="eval_service">
				<expression>message.contains(".service.impl")</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<File>${LOG_BASE}_service.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${LOG_BASE}_service.%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<maxHistory>${log.maxHistory:-60}</maxHistory>
		</rollingPolicy>
		<append>true</append>
		<encoder charset="${CHARSET}"
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%-15d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level
				%logger{80}[%file:%line] - %msg%n %ex{2}</pattern>
			<charset>${CHARSET}</charset>
			<immediateFlush>true</immediateFlush>
		</encoder>
	</appender>
	
	 <appender name="project-web" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter"> <level>INFO</level> 
		</filter> <File>${LOG_BASE}_web.log</File> <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
		<FileNamePattern>${LOG_BASE}_web.%d{yyyy-MM-dd}.%i.log</FileNamePattern> 
		<maxHistory>${log.maxHistory:-60}</maxHistory> </rollingPolicy> <append>true</append> 
		<encoder charset="${CHARSET}" class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
		<pattern>%-15d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80}[%file:%line] 
		- %msg%n %ex{2}</pattern> <charset>${CHARSET}</charset> <immediateFlush>true</immediateFlush> 
		</encoder> </appender> -->
	<!-- <appender name="EMAIL" class="ch.qos.logback.classic.net.SMTPAppender"> 
		<SMTPHost>${mail.host}</SMTPHost> <SMTPPort>${mail.smtp.port}</SMTPPort> 
		<SSL>${mail.smtp.starttls.enable}</SSL> <Username>${mail.username}</Username> 
		<Password>${mail.pass}</Password> <To>${EDI}</To> <From>${mail.from}</From> 
		<Subject>异常: %logger{20} - %m</Subject> <layout class="ch.qos.logback.classic.html.HTMLLayout" 
		> <pattern>%date%level%thread%logger{0}%line%message</pattern> </layout> 
		</appender> <appender name="MONGO" class="logback.mongodb.MongoDBAppender"> 
		<connectionSource class="logback.mongodb.MongoDBConnectionSource"> <uri>mongodb://192.168.1.106:27017/</uri> 
		<db>test</db> <collection>log</collection> </connectionSource> </appender> 
		<appender name="ASYNCMONGO" class="ch.qos.logback.classic.AsyncAppender"> 
		<appender-ref ref="MONGO" /> </appender> <logger name="currency" additivity="false" 
		level="warn"> <appender-ref ref="MONGO"/> </logger> -->
	<!-- <appender name="jms_dao" class="ch.qos.logback.classic.net.JMSQueueAppender"> 
		<InitialContextFactoryName> org.apache.activemq.jndi.ActiveMQInitialContextFactory 
		</InitialContextFactoryName> <ProviderURL>tcp://192.168.1.120:61616</ProviderURL> 
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter"> <evaluator name="eval_service"> 
		<expression>message.contains("dao")</expression> </evaluator> <onMatch>ACCEPT</onMatch> 
		<onMismatch>DENY</onMismatch> </filter> <QueueConnectionFactoryBindingName>ConnectionFactory 
		</QueueConnectionFactoryBindingName> <QueueBindingName>cms_dao_log</QueueBindingName> 
		</appender> <appender name="jms_service" class="ch.qos.logback.classic.net.JMSQueueAppender"> 
		<InitialContextFactoryName> org.apache.activemq.jndi.ActiveMQInitialContextFactory 
		</InitialContextFactoryName> <ProviderURL>tcp://192.168.1.120:61616</ProviderURL> 
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter"> <evaluator name="eval_service"> 
		<expression>message.contains("service.impl")</expression> </evaluator> <onMatch>ACCEPT</onMatch> 
		<onMismatch>DENY</onMismatch> </filter> <QueueConnectionFactoryBindingName>ConnectionFactory 
		</QueueConnectionFactoryBindingName> <QueueBindingName>cms_service_log</QueueBindingName> 
		</appender> <appender name="DB" class="ch.qos.logback.classic.db.DBAppender"> 
		<connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource"> 
		<dataSource class="com.jolbox.bonecp.BoneCPDataSource"> <driverClass>${jdbc.driver}</driverClass> 
		<url>${jdbc.url}</url> <user>${jdbc.username}</user> <password>${jdbc.password}</password> 
		</dataSource> </connectionSource> </appender> 还可以将日志写入数据库,要把记录事件写入数据库，依赖于DBAppender和数据库已存在的三张表： 
		logging_event、logging_event_property 和 logging_event_exception 具体及更多参考： logback手册： 
		http://logback.qos.ch/manual/index.html Logback官方网站：http://logback.qos.ch/ 
		Slf4j官方网站：http://www.slf4j.org/ -->
	<!-- logback的优势： 好测试；与 SLF4J 关系紧；文档丰富；能自动加载配置文件；多个 JVM 写一个日志文件，或其他 I/O 错误时不影响程序执行；配置文件中加入条件控制；强大的日志过滤；更强的日志切分功能；自动压缩、删除日志文件；异常栈中更多的数据信息 
		与log4j的对比优势： http://www.oschina.net/translate/reasons-to-prefer-logbak-over-log4j 
		log4j to xml: http://logback.qos.ch/translator/
		xml to groovy:http://logback.qos.ch/translator/asGroovy.html
		 -->
</configuration>
